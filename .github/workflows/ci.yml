name: Continuous Integration

on:
  push:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
    types:
      - opened
      - reopened
      - synchronize
  schedule:
    - cron:  '0 4 * * *'

defaults:
  run:
    shell: bash

env:
  HELM_CHART_DIR: deployments/helm-chart
  GIT_NAME: NGINX Kubernetes Team
  GIT_MAIL: kubernetes@nginx.com

concurrency:
  group: ${{ github.ref_name }}-ci
  cancel-in-progress: true

jobs:

  checks:
    name: Checks and variables
    runs-on: ubuntu-20.04
    outputs:
      go_version: ${{ steps.vars.outputs.go_version }}
      go_path: ${{ steps.go.outputs.go_path }}
      k8s_latest: ${{ steps.vars.outputs.k8s_latest }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Cache Go controller tools
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-tools-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-tools-
      - name: Output Variables
        id: vars
        run: |
          echo "::set-output name=go_version::$(grep "go 1." go.mod | cut -d " " -f 2)"
          echo "::set-output name=k8s_latest::$(grep -m1 'FROM kindest/node' <tests/docker/Dockerfile | awk -F'[:v]' '{print $3}')"
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.vars.outputs.go_version }}
      - name: Determine GOPATH
        id: go
        run: echo "::set-output name=go_path::$(go env GOPATH)"
      - name: Check if CRDs changed
        run: |
          make update-crds && git diff --name-only --exit-code deployments/common/crds* deployments/helm-chart/crds*
      - name: Check if Codegen changed
        run: |
          cd ../.. && mkdir -p github.com/nginxinc && mv kubernetes-ingress/kubernetes-ingress github.com/nginxinc/ && cd github.com/nginxinc/kubernetes-ingress
          make update-codegen && git diff --name-only --exit-code pkg/**/zz_generated.deepcopy.go
          cd ../../.. && mv github.com/nginxinc/kubernetes-ingress kubernetes-ingress/kubernetes-ingress

  binary:
    name: Build binary
    runs-on: ubuntu-20.04
    needs: checks
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache Go build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.checks.outputs.go_version }}
      - name: Build binary
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: build --snapshot --rm-dist --single-target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ needs.checks.outputs.go_path }}
          AWS_PRODUCT_CODE: ${{ secrets.AWS_PRODUCT_CODE }}
          AWS_PUB_KEY: ${{ secrets.AWS_PUB_KEY }}
      - name: Store Artifacts in Cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-single

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    needs: checks
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Cache Go tests
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-tests-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-tests-
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.checks.outputs.go_version }}
      - name: Run Tests
        run: make cover
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.txt

  setup-matrix:
    name: Setup Matrix for Smoke Tests
    runs-on: ubuntu-20.04
    needs: [binary, unit-tests, checks]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" != "schedule" ]; then
            echo "::set-output name=matrix::{\"images\": \
                                                [{\"image\": \"debian\", \"marker\": \"ingresses\"}, \
                                                {\"image\": \"alpine\", \"marker\":\"vsr\"}, \
                                                {\"image\": \"alpine-opentracing\", \"marker\":\"policies\"}, \
                                                {\"image\": \"opentracing\", \"marker\": \"vs\"}, \
                                                {\"image\": \"ubi\", \"marker\": \"ts\"}, \
                                                {\"image\": \"debian-plus\", \"marker\": \"vs\"}, \
                                                {\"image\": \"debian-plus\", \"marker\": \"ts\"}, \
                                                {\"image\": \"alpine-plus\", \"marker\":\"ingresses\"}, \
                                                {\"image\": \"opentracing-plus\", \"marker\": \"vsr\"}, \
                                                {\"image\": \"ubi-plus\", \"marker\": \"policies\"}], \
                                              \"k8s\": [\"${{ needs.checks.outputs.k8s_latest }}\"]}"
          else
            echo "::set-output name=matrix::{\"k8s\": [\"1.19.16\", \"1.20.15\", \"1.21.10\", \"1.22.7\", \"${{ needs.checks.outputs.k8s_latest }}\"], \
                                             \"images\": [{\"image\": \"debian\"}, {\"image\": \"debian-plus\"}]}"
          fi

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-20.04
    needs: setup-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup-matrix.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Run Smoke Tests
        id: smoke-tests
        uses: ./.github/actions/smoke-tests
        with:
          image: ${{ matrix.images.image != '' && matrix.images.image || 'debian' }}
          marker: ${{ matrix.images.marker != '' && matrix.images.marker || '' }}
          k8s-version: ${{ matrix.k8s }}
          nginx-crt: ${{ secrets.NGINX_CRT }}
          nginx-key: ${{ secrets.NGINX_KEY }}
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.smoke-tests.outputs.test-results-name }}
          path: ${{ github.workspace }}/tests/${{ steps.smoke-tests.outputs.test-results-name }}.html
        if: always()

  helm-tests:
    name: Helm Tests
    runs-on: ubuntu-20.04
    needs: [binary, unit-tests, checks]
    env:
      NGINX_HTTP_PORT: 8080
      NGINX_HTTPS_PORT: 8443
      HELM_TEST_RETRIES: 5
      HELM_HTTP_POSTFIX: s
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Fetch Cached Artifacts
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-single
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Docker Image nginx-ingress
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=gha,scope=debian
          cache-to: type=gha,scope=debian,mode=max
          target: goreleaser
          tags: nginx-ingress:${{ github.sha }}
          pull: true
          load: true
          build-args: BUILD_OS=debian
      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --image=kindest/node:v${{ needs.checks.outputs.k8s_latest }} --wait 75s
          kind load docker-image nginx-ingress:${{ github.sha }} --name ${{ github.run_id }}
      - name: Install Chart
        run: >
          helm install
          oss
          .
          --set controller.image.repository=nginx-ingress
          --set controller.image.tag=${{ github.sha }}
          --set controller.service.type=NodePort
          --set controller.nginxplus=false
          --wait
        working-directory: ${{ github.workspace }}/deployments/helm-chart
      - name: Expose Test Ingresses
        run: |
          kubectl port-forward service/oss-nginx-ingress ${{ env.NGINX_HTTP_PORT }}:80 &
          kubectl port-forward service/oss-nginx-ingress ${{ env.NGINX_HTTPS_PORT }}:443 &
      - name: Test HTTP
        run: |
          . tests/ci-files/helm-http-test.sh ${{ env.HELM_TEST_RETRIES }} ${{ env.NGINX_HTTP_PORT }}
      - name: Test HTTPS
        run: |
          . tests/ci-files/helm-http-test.sh ${{ env.HELM_TEST_RETRIES }} ${{ env.NGINX_HTTPS_PORT }} ${{ env.HELM_HTTP_POSTFIX }}

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-20.04
    needs: [checks, smoke-tests]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache Go build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-
      - name: Setup Golang Environment
        uses: actions/setup-go@v3
        with:
          go-version: ${{ needs.checks.outputs.go_version }}

      - uses: actions/setup-node@v3
      - run: npm install js-yaml
        continue-on-error: true
        if: startsWith(github.ref, 'refs/tags/')
      - name: Publish release on tag
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
              const ref = context.ref.split("/")[2]
              const yaml = require('js-yaml');

              const releases = (await github.rest.repos.listReleases({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                per_page: 100,
              })).data

              const draft_release = releases.find(release => release.draft && release.tag_name === ref)

              const helm_file = (await github.rest.repos.getContent({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                path: "deployments/helm-chart/Chart.yaml",
                ref: ref,
              })).data.content

              const helm_yaml = yaml.load(Buffer.from(helm_file, 'base64').toString())
              const helm_version = helm_yaml.version
              console.log(`Helm version: ${helm_version}`)

              const update = await github.rest.repos.updateRelease({
                owner: context.payload.repository.owner.login,
                repo: context.payload.repository.name,
                release_id: draft_release.id,
                body: draft_release.body.replace("%HELM_CHART_VERSION%", helm_version),
                draft: false
              });
              console.log(`Release published: ${update.data.html_url}`)
              console.log(`Release notes: ${update.data.body}`)
        if: startsWith(github.ref, 'refs/tags/')

      - name: Build binaries
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: ${{ startsWith(github.ref, 'refs/tags/') && 'release' || 'build --snapshot' }} ${{ github.event_name == 'pull_request' && '--single-target' || '' }} --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOPATH: ${{ needs.checks.outputs.go_path }}
          AWS_PRODUCT_CODE: ${{ secrets.AWS_PRODUCT_CODE }}
          AWS_PUB_KEY: ${{ secrets.AWS_PUB_KEY }}
      - name: Store Artifacts in Cache
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-multi

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-20.04
    needs: build-binaries
    if: ${{ !startsWith(github.ref, 'refs/heads/release') }}
    strategy:
        fail-fast: false
        matrix:
          image: [debian, alpine, opentracing, alpine-opentracing]
          platforms: ["linux/arm, linux/arm64, linux/amd64, linux/ppc64le, linux/s390x"]
          include:
            - image: ubi
              platforms: "linux/arm64, linux/amd64, linux/s390x"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch Cached Artifacts
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-multi
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm,arm64,ppc64le,s390x
        if: github.event_name != 'pull_request'
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: DockerHub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name != 'pull_request'
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name != 'pull_request'
      - name: Login to Public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: github.event_name != 'pull_request'
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            nginx/nginx-ingress
            ghcr.io/nginxinc/kubernetes-ingress
            public.ecr.aws/nginx/nginx-ingress
          flavor: suffix=${{ contains(matrix.image, 'ubi') && '-ubi' || '' }}${{ contains(matrix.image, 'alpine') && '-alpine' || '' }}${{ contains(matrix.image, 'opentracing') && '-ot' || '' }},onlatest=true
          tags: |
            type=edge
            type=ref,event=pr
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.description=NGINX Ingress Controller for Kubernetes
            org.opencontainers.image.documentation=https://docs.nginx.com/nginx-ingress-controller
            org.opencontainers.image.vendor=NGINX Inc <kubernetes@nginx.com>
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/nginxinc/kubernetes-ingress/main/README.md
            io.artifacthub.package.logo-url=https://docs.nginx.com/nginx-ingress-controller/images/icons/NGINX-Ingress-Controller-product-icon.svg
            io.artifacthub.package.maintainers=[{"name":"NGINX Inc","email":"kubernetes@nginx.com"}]
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.keywords=kubernetes,ingress,nginx,controller

      - name: Output Variables
        id: var
        run: |
          version=${{ steps.meta.outputs.version }}
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
              ic_version=v$version
          else
              tag=$(git describe --tags --abbrev=0)
              sha_short=$(echo ${{ github.sha }} | cut -c1-7)
              ic_version=$tag-$version-$sha_short
          fi
          echo "::set-output name=ic_version::$ic_version"
      - name: Build Docker image (and push if not a PR)
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=gha,scope=${{ matrix.image }}
          cache-to: type=gha,scope=${{ matrix.image }},mode=max
          target: goreleaser
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ github.event_name != 'pull_request' && matrix.platforms || '' }}
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          pull: true
          no-cache: ${{ github.event_name != 'pull_request' }}
          build-args: |
            BUILD_OS=${{ matrix.image }}
            IC_VERSION=${{ steps.var.outputs.ic_version }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.2.5
        continue-on-error: true
        with:
          image-ref: nginx/nginx-ingress:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'
          ignore-unfixed: 'true'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        continue-on-error: true
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'
      - name: Upload Scan Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: 'trivy-results-${{ matrix.image }}.sarif'
          path: 'trivy-results-${{ matrix.image }}.sarif'
        if: always()

  build-docker-plus:
    name: Build Plus Docker Images
    runs-on: ubuntu-20.04
    needs: build-binaries
    strategy:
        fail-fast: false
        matrix:
          image: [debian-plus, alpine-plus, opentracing-plus]
          platforms: ["linux/arm64, linux/amd64"]
          target: [goreleaser]
          include:
            - image: ubi-plus
              platforms: "linux/arm64, linux/amd64, linux/s390x"
              target: goreleaser
            - image: debian-plus
              platforms: "linux/arm64, linux/amd64"
              target: aws
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch Cached Artifacts
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/dist
          key: nginx-ingress-${{ github.run_id }}-${{ github.run_number }}-multi
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64
        if: github.event_name != 'pull_request'
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: GCR Login
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCR_JSON_KEY }}
        if: github.event_name != 'pull_request'
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: 709825985650.dkr.ecr.us-east-1.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: startsWith(github.ref, 'refs/tags/')

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ startsWith(github.ref, 'refs/tags/') && 'gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/release/nginx-ic/nginx-plus-ingress' || '' }}
            ${{ startsWith(github.ref, 'refs/heads/release') && 'gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/staging/nginx-ic/nginx-plus-ingress' || '' }}
            ${{ startsWith(github.ref, 'refs/tags/') && contains(matrix.target, 'aws') && '709825985650.dkr.ecr.us-east-1.amazonaws.com/nginx/nginx-plus-ingress' || '' }}
            gcr.io/f5-gcs-7899-ptg-ingrss-ctlr/dev/nginx-ic/nginx-plus-ingress
          flavor: suffix=${{ contains(matrix.image, 'ubi') && '-ubi' || '' }}${{ contains(matrix.image, 'alpine') && '-alpine' || '' }}${{ contains(matrix.image, 'opentracing') && '-ot' || '' }}${{ contains(matrix.target, 'aws') && '-mktpl' || '' }},onlatest=true
          tags: |
            type=edge
            type=ref,event=branch,enable=${{ startsWith(github.ref, 'refs/heads/release') }}
            type=ref,event=pr
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern={{version}}
          labels: |
            org.opencontainers.image.description=NGINX Plus Ingress Controller for Kubernetes
            org.opencontainers.image.documentation=https://docs.nginx.com/nginx-ingress-controller
            org.opencontainers.image.vendor=NGINX Inc <kubernetes@nginx.com>

      - name: Output Variables
        id: var
        run: |
          version=${{ steps.meta.outputs.version }}
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
              ic_version=v$version
          else
              tag=$(git describe --tags --abbrev=0)
              sha_short=$(echo ${{ github.sha }} | cut -c1-7)
              ic_version=$tag-$version-$sha_short
          fi
          echo "::set-output name=ic_version::$ic_version"
      - name: Build Plus Docker image
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=gha,scope=${{ matrix.image }}
          cache-to: type=gha,scope=${{ matrix.image }},mode=max
          target: ${{ matrix.target }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ github.event_name != 'pull_request' && matrix.platforms || '' }}
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          pull: true
          no-cache: ${{ github.event_name != 'pull_request' }}
          build-args: |
            BUILD_OS=${{ matrix.image }}
            IC_VERSION=${{ startsWith(github.ref, 'refs/tags/') && steps.var.outputs.ic_version || 'CI' }}
          secrets: |
            "nginx-repo.crt=${{ secrets.NGINX_CRT }}"
            "nginx-repo.key=${{ secrets.NGINX_KEY }}"
      - name: Load image for Trivy
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=gha,scope=${{ matrix.image }}
          target: ${{ matrix.target }}
          tags: docker.io/${{ matrix.image }}:${{ steps.meta.outputs.version }}
          load: true
          build-args: |
            BUILD_OS=${{ matrix.image }}
            IC_VERSION=CI
          secrets: |
            "nginx-repo.crt=${{ secrets.NGINX_CRT }}"
            "nginx-repo.key=${{ secrets.NGINX_KEY }}"
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.2.5
        continue-on-error: true
        with:
          image-ref: docker.io/${{ matrix.image }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.image }}.sarif'
          ignore-unfixed: 'true'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        continue-on-error: true
        with:
          sarif_file: 'trivy-results-${{ matrix.image }}.sarif'
      - name: Upload Scan Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: 'trivy-results-${{ matrix.image }}.sarif'
          path: 'trivy-results-${{ matrix.image }}.sarif'
        if: always()

  package-helm:
    name: Package Helm Chart
    runs-on: ubuntu-20.04
    needs: [build-docker, helm-tests]
    outputs:
      version: ${{ steps.var.outputs.helm_version }}
      type: ${{ steps.var.outputs.helm_type }}
    if: ${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/heads/release') }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Output Variables
        id: var
        run: |
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
              helm_version="$(helm show chart ${{ env.HELM_CHART_DIR }} | grep 'version:' | cut -d ' ' -f 2)"
              helm_type="stable"
          else
              helm_version="0.0.0-edge"
              helm_type="edge"
          fi
          echo "::set-output name=helm_version::$helm_version"
          echo "::set-output name=helm_type::$helm_type"
      - name: Lint
        run: helm lint ${{ env.HELM_CHART_DIR }}
      - name: Package
        run: helm package --version ${{ steps.var.outputs.helm_version }} ${{ env.HELM_CHART_DIR }}
      - name: Upload Chart
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: ${{ github.workspace }}/nginx-ingress-${{ steps.var.outputs.helm_version }}.tgz

  release-helm:
    name: Release Helm Chart
    runs-on: ubuntu-20.04
    needs: package-helm
    if: ${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/heads/release') }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: nginxinc/helm-charts
          fetch-depth: 1
          token: ${{ secrets.NGINX_PAT }}
      - name: Remove previous Chart
        run: rm -f ${{ github.workspace }}/${{ needs.package-helm.outputs.type }}/nginx-ingress-${{ needs.package-helm.outputs.version }}.tgz
      - name: Retrieve latest Helm Chart
        uses: actions/download-artifact@v3
        with:
          name: helm-chart
          path: ${{ github.workspace }}/${{ needs.package-helm.outputs.type }}
      - name: Push Helm Chart
        run: |
          helm repo index ${{ needs.package-helm.outputs.type }} --url https://helm.nginx.com/${{ needs.package-helm.outputs.type }}
          git add -A
          git -c user.name='${{ env.GIT_NAME }}' -c user.email='${{ env.GIT_MAIL }}' \
          commit -m "NGINX Ingress Controller - Release ${{ needs.package-helm.outputs.type }} ${{ needs.package-helm.outputs.version }}"
          git push -u origin master
